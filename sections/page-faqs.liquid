{%- liquid
  assign animation_effect = settings.animations
  assign animated = false
  if animation_effect != 'none'
    assign animated = true
  endif

  assign container = section.settings.container
  if container == 'w-full'
    assign container = 'container-full'
  endif
  assign classes = 'm-section m-faqs-section'
  if section.settings.custom_class != blank
    assign classes = classes | append: ' ' | append: section.settings.custom_class
  endif
  assign classes = classes | append: ' m-gradient' | append: ' m-color-' | append: section.settings.color_scheme
  assign menu_items = section.blocks | where: 'type', 'menu_item'
-%}
<section id="faqs--{{ section.id }}" class="{{ classes }}" data-section-id="{{ section.id }}" data-section-type="page-faqs">
  <style>
    #faqs--{{ section.id }} .m-faqs-section__menu {position: sticky; top: 100px; align-self: start;}
    #faqs--{{ section.id }} .m-faqs-section__menu .m-link {display: flex; align-items: center; gap: 10px; padding: 10px 12px; border-radius: 8px; transition: background-color .2s ease, opacity .2s ease;}
    #faqs--{{ section.id }} .m-faqs-section__menu .m-link:hover {background: rgba(var(--color-foreground), .06); opacity: 1;}
    #faqs--{{ section.id }} .m-faqs-section__menu .m-link[aria-current="true"] {background: rgba(var(--color-foreground), .1); opacity: 1;}
    #faqs--{{ section.id }} .m-faqs-section__menu svg {width: 18px; height: 18px; min-width: 18px; color: currentColor;}
    #faqs--{{ section.id }} .m-faqs-section__content [id] {scroll-margin-top: 110px;}
  </style>
  <div class="{{ container }}">
    <div class="m-row">
      {% if section.settings.menu != blank or menu_items.size > 0 %}
        <div class="m-faqs-section__menu lg:m:w-3/12{% if animated %} m-scroll-trigger animate--{{ animation_effect }}{% endif %}">
          <ul class="m-link-lists--border">
            {% if menu_items.size > 0 %}
              {%- for block in menu_items -%}
                <li class="m-link-lists--item">
                  <a class="m-link" href="#{{ block.settings.anchor | escape }}">
                    {%- case block.settings.icon -%}
                      {%- when 'credit-card' -%}
                        <svg class="m-svg-icon--medium-small" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="5" width="20" height="14" rx="2"/><line x1="2" y1="10" x2="22" y2="10"/></svg>
                      {%- when 'truck' -%}
                        <svg class="m-svg-icon--medium-small" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><rect x="1" y="3" width="15" height="13"/><polygon points="16,8 20,8 23,11 23,16 16,16"/><circle cx="5.5" cy="18.5" r="1.75"/><circle cx="18.5" cy="18.5" r="1.75"/><line x1="1" y1="16" x2="16" y2="16"/></svg>
                      {%- when 'returns' -%}
                        <svg class="m-svg-icon--medium-small" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M3 12a9 9 0 1 0 3-6.708"/><polyline points="3 3 3 9 9 9"/></svg>
                      {%- when 'diamond' -%}
                        <svg class="m-svg-icon--medium-small" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><polygon points="12 2 19 9 12 22 5 9 12 2"/><line x1="12" y1="2" x2="12" y2="22"/></svg>
                      {%- when 'users' -%}
                        <svg class="m-svg-icon--medium-small" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M17 21v-2a4 4 0 0 0-4-4H7a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M23 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>
                      {%- when 'mail' -%}
                        <svg class="m-svg-icon--medium-small" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="5" width="18" height="14" rx="2"/><polyline points="3,7 12,13 21,7"/></svg>
                    {%- endcase -%}
                    <span style="margin-left:8px">{{ block.settings.title }}</span>
                  </a>
                </li>
              {%- endfor -%}
            {% elsif section.settings.menu != blank %}
              {%- for link in linklists[section.settings.menu].links -%}
                <li class="m-link-lists--item"><a class="m-link{% if link.active %} active{% endif %}" href="{{ link.url }}">{{ link.title }}</a></li>
              {%- endfor -%}
            {% endif %}
          </ul>
        </div>
      {% endif %}
      <div class="m-faqs-section__content{% if section.settings.menu != blank or menu_items.size > 0 %} lg:m:w-9/12{% else %} m:w-full{% endif %}{% if animated %} m-scroll-trigger animate--{{ animation_effect }}{% endif %}">
        {% for block in section.blocks %}
          <div class="m-faqs-section__block m-faqs-section__block-{{ block.type }}">
            {% case block.type %}
              {% when 'content' %}
                {% if block.settings.content != blank %}
                  {{ block.settings.content }}
                {% endif %}
              {% when 'accordion' %}
                {% if block.settings.title != blank and block.settings.content != blank %}
                  <collapsible-tab
                    class="m-collapsible no-js-hidden"
                    data-block-id="collapsible-tab-{{ block.id }}"
                    {% if block.settings.open %}open="true"{% endif %}
                  >
                    <h3 class="m-collapsible--button" data-trigger>
                      <span>{{ block.settings.title }}</span>
                      <span class="m-collapsible--icon">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M13.5306 6.53073L8.5306 11.5307C8.46092 11.6007 8.37813 11.6561 8.28696 11.694C8.1958 11.7318 8.09806 11.7513 7.99935 11.7513C7.90064 11.7513 7.8029 11.7318 7.71173 11.694C7.62057 11.6561 7.53778 11.6007 7.4681 11.5307L2.4681 6.53073C2.3272 6.38984 2.24805 6.19874 2.24805 5.99948C2.24805 5.80023 2.3272 5.60913 2.4681 5.46823C2.60899 5.32734 2.80009 5.24818 2.99935 5.24818C3.19861 5.24818 3.3897 5.32734 3.5306 5.46823L7.99997 9.93761L12.4693 5.46761C12.6102 5.32671 12.8013 5.24756 13.0006 5.24756C13.1999 5.24756 13.391 5.32671 13.5318 5.46761C13.6727 5.60851 13.7519 5.7996 13.7519 5.99886C13.7519 6.19812 13.6727 6.38921 13.5318 6.53011L13.5306 6.53073Z" fill="currentColor"/>
                        </svg>
                      </span>
                    </h3>
                    <div class="m-collapsible--content" data-content hidden>
                        <div class="m-collapsible--content__inner rte">
                          {{ block.settings.content }}
                        </div>
                    </div>
                  </collapsible-tab>
                {% endif %}
              {% when 'menu_item' %}
                {% comment %} Intentionally not rendered in content area {% endcomment %}
              {% else %}
                {# Unknown block type - no render #}
            {% endcase %}
          </div>
        {% endfor %}
      </div>
    </div>
  </div>
  <script>
    (function() {
      const root = document.getElementById('faqs--{{ section.id }}');
      if (!root) return;
      const links = root.querySelectorAll('.m-faqs-section__menu a[href^="#"]');
      function setActive(hash) {
        links.forEach(a => a.setAttribute('aria-current', a.getAttribute('href') === hash ? 'true' : 'false'));
      }
      function onHashChange() {
        if (!location.hash) return;
        setActive(location.hash);
      }
      links.forEach(a => {
        a.addEventListener('click', function(e) {
          const id = this.getAttribute('href').slice(1);
          const target = document.getElementById(id);
          if (target) {
            e.preventDefault();
            target.scrollIntoView({ behavior: 'smooth', block: 'start' });
            history.replaceState(null, '', '#' + id);
            setActive('#' + id);
          }
        });
      });
      const io = ('IntersectionObserver' in window) ? new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting && entry.target.id) {
            const hash = '#' + entry.target.id;
            setActive(hash);
          }
        });
      }, { rootMargin: '-120px 0px -70% 0px', threshold: 0.1 }) : null;
      if (io) {
        root.querySelectorAll('.m-faqs-section__content [id]').forEach(el => io.observe(el));
      }
      onHashChange();
    })();
  </script>
</section>
{% schema %}
{
  "name": "FAQs",
  "enabled_on": {
    "templates": [
      "page"
    ]
  },
  "class": "faqs-section",
  "settings": [
    {
      "type": "header",
      "content": "General"
    },
    {
      "type": "select",
      "id": "container",
      "label": "Container type",
      "default": "container",
      "options": [
        {
          "value": "container-fluid",
          "label": "Default"
        },
        {
          "value": "w-full",
          "label": "Full width"
        },
        {
          "value": "container",
          "label": "Use container box"
        }
      ]
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Color scheme"
    },
    {
      "type": "header",
      "content": "Settings"
    },
    {
      "type": "link_list",
      "id": "menu",
      "label": "Select menu"
    },
    {
      "type": "header",
      "content": "Custom Attributes"
    },
    {
      "type": "text",
      "id": "custom_class",
      "label": "Custom classes"
    }
  ],
  "blocks": [
    {
      "type": "menu_item",
      "name": "Left menu item",
      "settings": [
        { "type": "text", "id": "title", "label": "Title", "default": "Shipping & Delivery" },
        { "type": "text", "id": "anchor", "label": "Anchor ID (without #)", "default": "shipping-delivery" },
        { "type": "select", "id": "icon", "label": "Icon", "default": "truck", "options": [
          {"value":"credit-card","label":"Credit card"},
          {"value":"truck","label":"Truck"},
          {"value":"returns","label":"Returns"},
          {"value":"diamond","label":"Craftsmanship"},
          {"value":"users","label":"Community"},
          {"value":"mail","label":"Mail"}
        ] }
      ]
    },
    {
      "type": "content",
      "name": "Custom content",
      "settings": [
        {
          "type": "html",
          "id": "content",
          "label": "Content",
          "info": "Allow html code"
        }
      ]
    },
    {
      "type": "accordion",
      "name": "Accordion item",
      "settings": [
        {
          "type": "textarea",
          "id": "title",
          "label": "Heading",
          "default": "Question Name"
        },
        {
          "type": "richtext",
          "id": "content",
          "label": "Content",
          "default": "<p>Answer Content</p>"
        },
        {
          "type": "checkbox",
          "id": "open",
          "label": "Open Tab By Default",
          "default": false
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "FAQs",
      "blocks": [
        {
          "type": "accordion"
        },
        {
          "type": "accordion"
        },
        {
          "type": "accordion"
        },
        {
          "type": "accordion"
        }
      ]
    }
  ]
}
{% endschema %}
